#+title: Init file shared among various version of Emacs

* Spacemacs user-config

#+begin_src emacs-lisp :tangle yes
  ;; (spacemacs/disable-auto-evilification 'org-agenda-mode)

  ;; ;; ;; Use cmd key for meta
  ;; ;; ;; https://superuser.com/questions/297259/set-emacs-meta-key-to-be-the-mac-key
  ;; (setq mac-option-key-is-meta t
  ;;       mac-command-key-is-meta nil
  ;;       mac-command-modifier 'super
  ;;       mac-option-modifier 'meta)
  ;; (setq mac-command-modifier 'super)

  ;; LaTeX, macOS specific
  (setq latex-view-with-pdf-tools nil)
  (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
  (setq TeX-view-program-list
        '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

  ;; set word wrap to t
  (setq-default word-wrap t)

  ;; open file under cursor
  (global-set-key (kbd "C-c o") 'ffap)
#+end_src

* Basics

Auto fill? No!

#+begin_src emacs-lisp :tangle yes
  ;; (add-hook 'org-mode-hook 'turn-on-auto-fill)
  (auto-fill-mode -1)
  (remove-hook 'text-mode-hook #'turn-on-auto-fill)
#+end_src

Define ~compile-command~ as ~make~

#+begin_src emacs-lisp :tangle yes
(setq compile-command "make ")
#+end_src

Hiding markup elements in org-mode. [[https://emacs.stackexchange.com/questions/1095/hiding-markup-elements-in-org-mode][reference]]

#+begin_src emacs-lisp :tangle yes
(setq org-hide-emphasis-markers t)
#+end_src

Set truncate line as default

#+begin_src emacs-lisp :tangle yes
  (set-default 'truncate-lines nil)
  ;; https://stackoverflow.com/a/950406
  (add-hook 'dired-mode-hook (lambda () (setq truncate-lines t)))
#+end_src

* windmove

#+begin_src emacs-lisp :tangle yes
  ;; close all buffers
  (defun my-close-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
#+end_src

* Evil mode

#+begin_src emacs-lisp :tangle yes
  ;; evil mode, move visual line instead of real line
  (setq evil-respect-visual-line-mode t)
  ;; Make horizontal movement cross lines                                    
  (setq-default evil-cross-lines t)
  ;; ;; Make movement keys work like they should
  (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
#+end_src

* org mode

#+begin_src emacs-lisp :tangle yes
  ;; (with-eval-after-load 'org
  ;;   ;; here goes your Org config
  ;;   )
  (require 'org)
  (setq-default org-startup-with-inline-images nil)

  (eval-after-load 'ox
  '(add-to-list 'org-export-options-alist '("toc" "toc" nil nil nil)))

#+end_src

** liveorg

#+begin_src emacs-lisp :tangle no
  ;; (add-to-list 'load-path (expand-file-name "~/.emacs.d/emacs-liveorg"))
  ;; (require 'liveorg)
  ;; only activate in org-mode
  (use-package liveorg
    :ensure t
    :load-path "~/emacs-dotfile/packages/emacs-liveorg"
    :config
    (setq liveorg-browser "Safari.app")
    (define-key org-mode-map "\C-cE" 'liveorg-preview)
    (define-key org-mode-map "\C-ce" 'org-html-export-to-html)
    )
#+end_src

** org-inline-pdf

To enable inline PDF preview in Org buffers. Source: https://github.com/shg/org-inline-pdf.el

#+begin_src emacs-lisp :tangle no
  (use-package org-inline-pdf
    :ensure t
    :defer 5
    :mode ("\\.org\\'" . org-mode)
    :config
    (add-hook 'org-mode-hook #'org-inline-pdf-mode))
#+end_src

** ox-gfm

#+begin_src emacs-lisp :tangle yes
  (eval-after-load "org"
    '(require 'ox-gfm nil t))
#+end_src

* Clipboard
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "s-v") 'clipboard-yank)
#+end_src

* Auto complete (snippets)

#+begin_src emacs-lisp :tangle yes
  ;; set snippets directory
  (yas-global-mode 1)
  ;; (setq auto-completion-private-snippets-directory "/startrek/chongchong/emacs-dotfile/shared/snippets/personal")
  ;; (setq yas-snippet-dirs (append yas-snippet-dirs '("/startrek/chongchong/emacs-dotfile/shared/snippets/personal")))
  ;; (setq auto-completion-private-snippets-directory "~/emacs-dotfile/shared/snippets/personal")
  (setq yas-snippet-dirs (append yas-snippet-dirs '("~/emacs-dotfile/shared/snippets/personal")))
  (yas-reload-all)
#+end_src

* Python

Usage: =defg<tab>=. Ref: stackexchange, [[https://emacs.stackexchange.com/a/19471/26582][Library for automatically inserting python docstring in Google style]]

#+begin_src emacs-lisp :tangle yes
  (defun python-args-to-google-docstring (text &optional make-fields)
  "Return a reST docstring format for the python arguments in yas-text."
  (interactive)
  (let* ((indent (concat "\n" (make-string (current-column) 32)))
       (args (python-split-args text))
     (nr 0)
       (formatted-args
    (mapconcat
     (lambda (x)
       (concat "    " (nth 0 x)
         (if make-fields (format " ${%d:arg%d}" (cl-incf nr) nr))
         (if (nth 1 x) (concat " \(default " (nth 1 x) "\)"))))
     args
     indent)))
    (unless (string= formatted-args "")
    (concat
     (mapconcat 'identity
      (list "" "Args:" formatted-args)
      indent)
     "\n"))))
#+end_src

* Latex

My latex commands are installed in ~/startrek/chongchong/local/texlive/~. 

Some keybindings in latex mode.
Set preview image format as svg. Note: this rely on the use of [[https://github.com/railwaycat/homebrew-emacsmacport/releases][Yamamoto's Emacs a.k.a. Emacs Mac Port]], which has =svg= support. Regular emacs downloaded from emacsformacosx.com will not work.
Source: https://emacs.stackexchange.com/a/34085

#+begin_src emacs-lisp :tangle yes
  ;; (require 'preview-dvisvgm)
  (with-eval-after-load "latex"
    ;; here goes your Org config
    (define-key LaTeX-mode-map (kbd "C-c C-c") 'TeX-command-run-all)
    ;; not working
    (define-key LaTeX-mode-map (kbd "M-n") 'outline-next-heading)
    (define-key LaTeX-mode-map (kbd "M-p") 'outline-previous-heading)
    (setq TeX-save-query nil)
    (setq org-latex-create-formula-image-program 'dvisvgm)
    (setq org-preview-latex-default-process 'dvisvgm)
    (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
    )
  ;; (setq org-preview-latex-default-process 'divpng)

  ;; (setq my:dvi-to-svg
  ;;     (my:dvi-to-svg :programs
  ;;         ("latex" "dvisvgm")
  ;;            :description "dvi > svg"
  ;;            :message "you need to install the programs: latex and dvisvgm."
  ;;            :use-xcolor t
  ;;            :image-input-type "dvi"
  ;;            :image-output-type "svg"
  ;;            :image-size-adjust (1.7 . 1.5)
  ;;            :latex-compiler ("latex -interaction nonstopmode -output-directory %o %f")
  ;;            :image-converter ("dvisvgm %f -e -n -b min -c %S -o %O")))
  ;; (with-eval-after-load 'ox-latex
  ;;     (add-to-list 'org-preview-latex-process-alist my:dvi-to-svg)
  ;;     (setq org-preview-latex-default-process 'my:dvi-to-svg))
#+end_src



#+begin_src emacs-lisp :tangle yes
  ;; insert "\(" and "\)" on latex-mode when pressing an unmatched "$"
  (setq-default TeX-electric-math (cons "\\( " " \\)"))
  ;; set electric-pair-mode to t in latex-mode
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (setq-local electric-pair-mode t)))

  (defun my-remove-aux ()
    ;; list and remove all .aux files
    (interactive)
    (shell-command "ls *.aux")
    (shell-command "rm *.aux")
    )
#+end_src

* Makefile

#+begin_src emacs-lisp :tangle yes
  (add-hook 'makefile-mode-hook
            (lambda ()
              (setq indent-tabs-mode t)
              (setq tab-width 4)
              (setq indent-line-function 'insert-tab)))
#+end_src

* Copilot

#+begin_src emacs-lisp :tangle no
  ;; accept completion from copilot and fallback to company

  (with-eval-after-load 'company
    ;; disable inline previews
    (delq 'company-preview-if-just-one-frontend company-frontends))

  (with-eval-after-load 'copilot
    (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
    (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion))

  (add-hook 'prog-mode-hook 'copilot-mode)

  (define-key evil-insert-state-map (kbd "C-<tab>") 'copilot-accept-completion-by-word)
  (define-key evil-insert-state-map (kbd "C-TAB") 'copilot-accept-completion-by-word)
#+end_src

* Keybindings in the end

** Basic keys

#+begin_src emacs-lisp :tangle yes
  (evil-define-key 'visual evil-surround-mode-map "s" 'evil-substitute)
  (evil-define-key 'visual evil-surround-mode-map "S" 'evil-surround-region)
#+end_src

** Org mode keys

#+begin_src emacs-lisp :tangle yes
  ;; (with-eval-after-load 'org
  ;;   (define-key org-mode-map (kbd "M-n") #'org-next-visible-heading)
  ;;   (evil-define-key 'normal org-mode-map (kbd "M-n") #'org-next-visible-heading)
  ;;   )

  ;; (define-key org-agenda-mode-map (kbd "C-n") 'org-agenda-next-line)
  
  (defun my-org-mode-config ()
    (local-set-key "\M-n" 'outline-next-visible-heading)
    (local-set-key "\M-p" 'outline-previous-visible-heading)
  )
  (add-hook 'org-mode-hook 'my-org-mode-config)
#+end_src

** Super keys

#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "s-v") 'clipboard-yank)
  (global-set-key (kbd "s-k") 'kill-current-buffer)
  (global-set-key (kbd "s-K") 'kill-buffer-and-window)
  (global-set-key (kbd "s-e") 'eval-region)
  (global-set-key (kbd "s-b") 'eval-buffer)
  (global-set-key (kbd "s-c") 'compile)
  (global-set-key (kbd "s-r") 'recompile)
  (global-set-key (kbd "s-,") 'previous-buffer)
  (global-set-key (kbd "s-.") 'next-buffer)
  ;; (global-unset-key (kbd "s-j"))
  ;; (global-set-key (kbd "s-j") 'jump-to-register)
  ;; (global-set-key (kbd "M-v") 'evil-paste-after)
#+end_src

** Make swithing windows easier

#+begin_src emacs-lisp :tangle yes
  (require 'windmove)
  (windmove-default-keybindings 'super)
  (setq windmove-wrap-around t)
  (global-set-key (kbd "<S-s-down>") 'windmove-swap-states-down)
  (global-set-key (kbd "<S-s-up>") 'windmove-swap-states-up)
  (global-set-key (kbd "<S-s-left>") 'windmove-swap-states-left)
  (global-set-key (kbd "<S-s-right>") 'windmove-swap-states-right)
#+end_src

Not using. Use windmove default (super + arrows) instead. 

#+begin_src emacs-lisp :tangle no
  ;; ;; make swithing windows easier
   (with-eval-after-load 'org
     (define-key org-mode-map (kbd "M-j") nil)
     (define-key org-mode-map (kbd "M-k") nil)
     (define-key org-mode-map (kbd "M-h") nil)
     (define-key org-mode-map (kbd "M-l") nil)
     (define-key org-mode-map (kbd "M-j") 'windmove-down)
     (define-key org-mode-map (kbd "M-k") 'windmove-up)
     (define-key org-mode-map (kbd "M-h") 'windmove-left)
     (define-key org-mode-map (kbd "M-l") 'windmove-right)
     (define-key org-mode-map (kbd "M-H") 'org-metaleft)
     (define-key org-mode-map (kbd "M-J") 'org-metadown)
     (define-key org-mode-map (kbd "M-K") 'org-metaup)
     (define-key org-mode-map (kbd "M-L") 'org-metaright)
     ;; (define-key org-mode-map (kbd "M-H") 'org-shiftmetaleft)
     ;; (define-key org-mode-map (kbd "M-J") 'org-shiftmetadown)
     ;; (define-key org-mode-map (kbd "M-K") 'org-shiftmetaup)
     ;; (define-key org-mode-map (kbd "M-L") 'org-shiftmetaright)
     )

   (global-set-key (kbd "M-p") (kbd "C-- C-x o"))
   (global-set-key (kbd "M-n") (kbd "C-x o"))
   ;; (global-set-key (kbd "M-j") 'windmove-down)
   ;; (global-set-key (kbd "M-k") 'windmove-up)
   ;; (global-set-key (kbd "M-h") 'windmove-left)
   ;; (global-set-key (kbd "M-l") 'windmove-right)
   (global-set-key (kbd "M-j") 'evil-window-down)
   (global-set-key (kbd "M-k") 'evil-window-up)
   (global-set-key (kbd "M-h") 'evil-window-left)
   (global-set-key (kbd "M-l") 'evil-window-right)
   (define-key evil-normal-state-map (kbd "M-h") #'evil-window-left)
   (define-key evil-normal-state-map (kbd "M-j") #'evil-window-down)
   (define-key evil-normal-state-map (kbd "M-k") #'evil-window-up)
   (define-key evil-normal-state-map (kbd "M-l") #'evil-window-right)
#+end_src

* End message

#+begin_src emacs-lisp :tangle yes
  (message "init-share.el sourced!!")
#+end_src
